exit
continue
exit
eexit
xit
continue
quit
exit
payload.keys
payload
url
response = RestClient.put(url, payload, self.headers)
url
continue
payload
headers
url
exit
next
   223:               
lesson.slice("id","title","name","indent","type","html_url","page_url","url","completion_requirement", "published")
lesson
next
html
next
created_lesson_info = CanvasInterface.create_lesson(options, lesson["title"], html)
html = RepositoryConverter.adjust_converted_html(options, html)
html = RepositoryConverter.remote_file_conversion(options)
options[:filepath] = lesson["repository"]
options[:type] = lesson["type"].downcase
!lesson["repository"]
lesson["repository"]
lesson
url
RestClient.put(url, payload, headers)
continue
url
continue
payload
continue
payload
continue
continuje
continue
payload.keys
payload
continue
options[:mode]
exit
meth(options)
def meth(mode:,course:) puts mode end
def meth(mode:,course:)
options
options[:mode]
options
continue
new_html
continue
url
exit
url
exit
url.sub(/.*\/\/.*?\//,'')
url[/.*\/\/.*?\//]
url[/.*//.*?//]
ENV['CANVAS_API_PATH']
url
type
response.body
response
continue
repo
continue
repo
continue
repo
lesson
continue
lesson
repo
continue
repo
continue
repo
continue
repo
repo[/data-repo="(.+)""( |>)/]
repo
continue
lesson
continue
lesson
continue
lesson
continue
lesson
continue
lesson
continue
exit
ezxit
exit
lesson_data
lesson_data[1]
exit
lesson_data[1]
type
exit
lesson_data[0]
lesson_data
exit
lesson_data[1]
exit
lesson_types.find {|type| url.match?("type")}
url
lesson_types
type
exit
lesson_data[1]
lesson_data[0]
lesson_data
exit
image_source
continue
image_source
continue
image_source
continue
'src="' + raw_remote_url + '/master/' + image_source + '"'
image_source
continue
image_source
continue
image_source
continue
image_source
continue
image_source
exit
lesson
exit
continue
lesson
r
r["page_id"]
response["page_id"]
id
canvas_data[:lessons].length
canvas_data[:lessons]
canvas_data
canvas_data = CanvasDotfile.read_canvas_data
self.exists?
r["id"]
r["page_id"]
r["title"]
r.title
pp r.keys
r.keys
r = JSON.parse(response)
JSON.parse(response)
response
