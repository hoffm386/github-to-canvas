#!/usr/bin/env ruby
require 'optparse'
require 'github-to-canvas'

options = {}
OptionParser.new do |opts|
  opts.banner = <<-EOBANNER
    GitHub To Canvas
    ====================
    A tool for migrating and aligning GitHub content with the Canvas LMS. Access
    to the Canvas API and a GitHub org required. For configuration and setup, visit
    https://github.com/learn-co-curriculum/github-to-canvas

    Commands:
    github-to-canvas --create-lesson COURSE
    github-to-canvas --create-lesson COURSE [--save]
    github-to-canvas --create-lesson COURSE [--branch BRANCH]
    github-to-canvas --create-lesson COURSE [--branch BRANCH] [--name NAME]
    github-to-canvas --create-lesson COURSE [--branch BRANCH] [--name NAME] [--type TYPE]
    github-to-canvas --create-lesson COURSE [--fis-links]
    github-to-canvas --create-lesson COURSE [--fis-links] [--remove-header-and-footer]
    github-to-canvas --align
    github-to-canvas --align [--branch BRANCH]
    github-to-canvas --align [--only-content]
    github-to-canvas --align [--branch BRANCH] [--fis-links]
    github-to-canvas --info COURSE
    github-to-canvas --version

    
    Run these commands from inside a local GitHub repository. This gem is built for Flatiron School's internal use.
    Some default behaviors assume this, like the default Canvas API path.

    Create and Update Canvas Lessons From Inside a Local GitHub Repo Folder:

    github-to-canvas --create-lesson 154                                                           -> Creates a lesson in course 154, derives the name and type from the local repo
    github-to-canvas --create-lesson 154 --name "Fetch Lab"                                        -> Creates a lesson in course 154 with the provided name, derives the type from the local repo
    github-to-canvas --create-lesson 154 --name "Fetch Lab" --type assignment                      -> Creates an assignment in course 154 with the provided name
    github-to-canvas --create-lesson 154 --name "Fetch Lab" --branch solution                      -> Creates a lesson in course 154 with the provided name, uses the repository's solution branch and derives the type from the local repo
    github-to-canvas --align                                                                       -> Patches existing lessons in Canvas based on the .canvas file  
    github-to-canvas --align --fis-links                                                           -> Patches existing lessons in Canvas based on the .canvas file, adds additional Flatiron School specific HTML and meta-data
    github-to-canvas --align --remove-header-and-footer                                            -> Patches existing lessons in Canvas based on the .canvas file, removes top lesson header before converting to HTML    

    Get Info on a Canvas Course, Lesson or GitHub Repo:
    
    github-to-canvas --query COURSE                                                                -> Displays a course's modules and their lessons in course order as YAML
    github-to-canvas --map YAML                                                                    -> Uses a YAML file created with --query to retrieve repositories that were associated with Canvas lessons using --fis-links. Returns an updated YAML.
    github-to-canvas --read-from-canvas CANVAS_LESSON_URL                                          -> Retrieves a lesson's contents and information from Canvas
    github-to-canvas --read-from-github GITHUB_URL                                                 -> Retrieves the provided GitHub markdown file, converted into HTML

    Create and Update Canvas Lessons Using Remote GitHub Repositories:

    github-to-canvas --create-from-github GITHUB_URL --course COURSE_ID --type TYPE                -> Creates a lesson in the provided course using the remote GitHub URL. Source must be from a public repo.
    github-to-canvas --align-from-github GITHUB_URL --course COURSE_ID --id LESSON_ID --type TYPE  -> Updates a lesson in the provided course using the remote GitHub URL. Source must be from a public repo.

    Create and Update Canvas Courses From YAML:

    github-to-canvas --build-course YAML_FILE                                                     -> Uses the provided YAML file to create a course, add modules and populate them with lessons using remote GitHub repositories
    github-to-canvas --add-to-course YAML_FILE --course                                           -> Uses a YAML file to a modules and lessons to an existing course.
    github-to-canvas --update-course YAML_FILE                                                    -> Uses a YAML file to update lessons using their associated GitHub repositories (ignores module/course structure in YAML file)

  EOBANNER

  opts.on("-cCOURSE", "--create-lesson COURSE", 
          "Creates a new canvas lesson, converting the local repository's README.md to HTML. Adds .canvas file to remote repository") do |course| 
            options[:create_lesson] = true
            options[:course_id] = course
          end
  opts.on("-bBRANCH", "--branch BRANCH", 
          "Sets the repository branch used for lesson creation") do |branch| 
            options[:branch] = branch
          end
  opts.on("-nNAME", "--name NAME", 
          "Sets the name of the new Canvas lesson to be created. If no name is given, repository folder name is used") do |name| 
            options[:name] = name
          end
  opts.on("-tTYPE", "--type TYPE", 
          "Sets the type Canvas lesson to be created (page or assignment). If no type, type decided based on repository structure") do |type| 
            if type == 'page' || type == 'assignment' || type == 'discussion'
              options[:type] = type
            else
              puts "Invalid type. Defaulting to page"
              options[:type] = "page"
            end
          end
  opts.on("-fFILE", "--file FILE", 
          "Looks for and uses a markdown file in the currentt folder as source for conversion. Default file is README.md. Skips writing .canvas to repository") do |file| 
            options[:file_to_convert] = file
          end
  opts.on("-s", "--save-to-github",
          "Creates a local .canvas file and attempts to commit and push it to the GitHub repository") do |s| 
            options[:save_to_github] = true 
          end
  opts.on("-a", "--align", 
          "Updates a canvas lesson based on the local repository's README.md") do |a|
            options[:align] = true 
          end
  opts.on("-v", "--version",
          "Displays current gem version") do |v|
            options[:version] = true
          end
  opts.on("-l", "--fis-links",
          "Adds additional Flatiron School HTML after markdown conversion") do |f|
            options[:fis] = true
          end
  opts.on("--forkable",
          "Used with --fis-links, adds fork button to HTML header injected into Canvas lesson") do |remote|
            options[:forkable] = true
          end
  opts.on("-r", "--remove-header-and-footer",
          "Removes top lesson header and any Learn.co specific footer links before converting to HTML") do |r|
            options[:remove_header_and_footer] = true
          end
  opts.on("-h", "--header-only",
          "Only pushes header to Canvas, no other HTML content") do |h|
            options[:header_only] = true
          end
  opts.on("--course COURSE",
          "For align functionality only - updates the HTML content of a lesson using the provided course ID. Use with --id.") do |course_id|
            options[:course_id] = course_id
          end
  opts.on("--id ID",
          "For align functionality only - updates the HTML content of a lesson using the provided assignment or page ID. Use with --course.") do |id|
            options[:id] = id
          end
  opts.on("-o", "--only-content",
          "For align functionality only - updates the HTML content of a lesson without changing the name") do |o|
            options[:only_content] = true
          end
  opts.on("-q COURSE", "--query COURSE", 
          "Displays a course's lessons and assignments") do |course|
            options[:query] = course
          end
  opts.on("--map YAML_FILE", 
          "REQUIRES -f or --file Associates canvas lessons with repositories. Use query to create required YAML file") do |file|
            options[:map] = file
          end
  opts.on("--read-from-canvas CANVAS_URL",
          "Retrieves an existing Canvas lesson using the provided URL") do |url|
            options[:read_from_canvas] = url
          end
  opts.on("--read-from-github GITHUB_URL",
          "Converts an existing GitHub Readme to HTML using the provided URL. URL must be for a GitHub markdown file") do |url|
            options[:read_from_github] = url
          end
  opts.on("--create-from-github GITHUB_URL",
          "Creates a new Canvas lesson from a remote GitHub Readme. --course and --type options required") do |url|
            options[:create_from_github] = url
          end
  # opts.on("--create-quiz-from-github GITHUB_URL",
  #         "Creates a new Canvas quiz from a remote GitHub YAML file. --course option required") do |url|
  #           options[:quiz_from_github] = url
  #         end
  opts.on("--align-from-github GITHUB_URL",
          "Aligns an existing Canvas lesson using a remote GitHub Readme. --course, --id, and --type options required") do |url|
            options[:align_from_github] = url
          end
  opts.on("--build-course YAML_FILE", 
          "Creates Canvas course using provided YAML file") do |file|
            options[:build_course] = file
          end
  opts.on("--add-to-course YAML_FILE", 
          "Creates Canvas course using provided YAML file") do |file|
            options[:add_to_course] = file
          end
  opts.on("--update-course-lessons YAML_FILE", 
          "Updates all lessons in a course using remote repos in provided YAML file") do |file|
            options[:update_course_lessons] = file
          end
  
end.parse!

# Input validation
if options[:create_from_github] && (!options[:course_id] || !options[:type])
  puts 'Canvas course ID and lesson type required. Example: github-to-canvas --create-from-github URL --course ID --type TYPE'
  abort
elsif (options[:align_from_github] &&
        (!options[:course_id] || !options[:type] || !options[:id]))
  puts 'Canvas course ID, lesson ID, and type required. Example: github-to-canvas --create-from-github URL --course COURSE_ID --id LESSON_ID --type TYPE'
  abort
elsif options[:add_to_course] && !options[:course_id]
  puts '--course required'
  abort
end

# Set mode
if options[:version]
  options[:mode] = 'version'
elsif options[:read_from_canvas]
  options[:mode] = 'canvas_read'
elsif options[:read_from_github]
  options[:mode] = 'github_read'
elsif options[:create_from_github]
  options[:mode] = 'github_create'
elsif options[:align_from_github]
  options[:mode] = 'github_align'
elsif options[:query]
  options[:mode] = 'query'
elsif options[:map]
  options[:mode] = 'map'
elsif options[:build_course]
  options[:mode] = 'build_course'
elsif options[:add_to_course]
  options[:mode] = 'add_to_course'
elsif options[:update_course_lessons]
  options[:mode] = 'update_course_lessons'
elsif options[:create_lesson]
  options[:mode] = "create"
elsif options[:align]
  options[:mode] = "align"
end

# Set filepath
if options[:read_from_canvas]
  options[:filepath] = options[:read_from_canvas]
elsif options[:read_from_github]
  options[:filepath] = options[:read_from_github]
elsif options[:create_from_github]
  options[:filepath] = options[:create_from_github]
elsif options[:align_from_github]
  options[:filepath] = options[:align_from_github]
elsif options[:create_lesson] || options[:align]
  options[:filepath] = Dir.pwd
end

# Set boolean flags for HTML content changes
# !! to ensure it's a boolean
if (options[:create_from_github] ||
      options[:align_from_github] ||
      options[:build_course] ||
      options[:add_to_course] ||
      options[:update_course_lessons] ||
      options[:create_lesson] ||
      options[:align])
  options[:remove_header_and_footer] = !!options[:remove_header_and_footer]
  options[:forkable] = !!options[:forkable]
  options[:fis_links] = !!options[:fis]
  options[:header_only] = !!options[:header_only]
end

# Set boolean flags for alignment settings
if options[:create_lesson] || options[:align]
  options[:save_to_github] = !!options[:save_to_github]
  options[:only_update_content] = !!options[:only_content]
end

# Set file_to_convert
if options[:map]
  options[:file_to_convert] = options[:map]
elsif options[:build_course]
  options[:file_to_convert] = options[:build_course]
elsif options[:add_to_course]
  options[:file_to_convert] = options[:add_to_course]
elsif options[:update_course_lessons]
  options[:file_to_convert] = options[:update_course_lessons]
end

# Set type if missing
if !options[:type]
  if Dir.glob("**/*/").empty?
    options[:type] = "page"
    options[:forkable] = false
  else
    options[:type] = "assignment"
  end
end

# Set branch if missing
if !options[:branch]
  options[:branch] = 'master'
end

# Set name if missing
if !options[:name]
  if options[:file_to_convert]
    markdown = File.read("#{Dir.pwd}/#{options[:file_to_convert]}")
    if markdown.match?(/^# .+?\n\n/)
      options[:name] = markdown.match(/^# .+?\n\n/)[0].strip.gsub("# ","").gsub("#","")
    elsif markdown.match?(/^# .+?\n/)
      options[:name] = markdown.match(/^# .+?\n/)[0].strip.gsub("# ","").gsub("#","")
    else
      options[:name] = options[:file_to_convert]
    end
  else
    markdown = File.read("#{Dir.pwd}/README.md")
    if markdown.match?(/^# .+?\n\n/)
      options[:name] = markdown.match(/^# .+?\n\n/)[0].strip.gsub("# ","").gsub("#","")
    elsif markdown.match?(/^# .+?\n/)
      options[:name] = markdown.match(/^# .+?\n/)[0].strip.gsub("# ","").gsub("#","")
    else
      options[:name] = File.basename(Dir.getwd)
    end    
    options[:file_to_convert] = "README.md"
  end
end

# Set file_to_convert if missing
if !options[:file_to_convert]
  options[:file_to_convert] = "README.md"
end

GithubToCanvas.new(options)
